name: Build LedFx on Gh

on:
  push:
    branches:
      - gh-builds
  pull_request:
    branches:
      - gh-builds

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11']
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Backendver
        id: getbackendver
        run: |       
          echo "action_state=$(python3 ledfx/consts.py)" >> $GITHUB_ENV
          BINARY_NAME=LedFx-${{ runner.os }}
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
          echo "dir=$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # - uses: actions/cache@v3
      #   if: startsWith(runner.os, 'Linux')
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      # - uses: actions/cache@v3
      #   if: startsWith(runner.os, 'macOS')
      #   with:
      #     path: ~/Library/Caches/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      # - uses: actions/cache@v3
      #   if: startsWith(runner.os, 'Windows')
      #   with:
      #     path: ~\AppData\Local\pip\Cache
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      - name: Display Python version
        run: python --version

      - name: Install dependencies
        run: |
          python3 -m pip install -r requirements.txt pyinstaller
          python3 -m pip install -e .
          python3 setup.py develop


      - name: Build ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        run: |
          pyinstaller win.spec \
          && \
          7z.exe a -tzip $BINARY_NAME-core-$action_state.zip dist/LedFx "-mx5" "-xr!.git" "-xr!.github"

      - name: Upload ${{ env.BINARY_NAME }} core ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}
            path: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}.zip

      - name: Build ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        run: |
            pyinstaller win-portable.spec
            ls dist/
            mv dist/LedFx.exe dist/$BINARY_NAME-portable-$action_state.exe


      - name: Upload ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
        if: startsWith(runner.os, 'Windows')
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BINARY_NAME }}-portable-${{ env.action_state }}
            path: dist\${{ env.BINARY_NAME }}-portable-${{ env.action_state }}.exe
