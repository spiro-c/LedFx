name: Build LedFx on Gh

on:
  push:
    branches:
      - gh-builds
  pull_request:
    branches:
      - gh-builds

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -x {0}
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ['3.12.x']
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Backend Version
        id: getbackendver
        run: |       
          echo "action_state=$(python3 ledfx/consts.py)" >> $GITHUB_ENV
          BINARY_NAME=LedFx-${{ runner.os }}
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update Path for Windows
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Enable long paths for git on Windows

        # Enable handling long path names (+260 char) on the Windows platform
        # https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation
        run: git config --system core.longpaths true

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Check lock file
        run: poetry check --lock

      - name: Build a binary wheel
        run: |
          poetry build

      - name: Install LedFx
        run: |
          poetry install
          poetry run pip install pyinstaller
          pip install pyinstaller
          poetry env info

      - name: Portaudio dependency for windows
        if: startsWith(runner.os, 'Windows') 
        uses: msys2/setup-msys2@v2
#        shell: msys2 {0}
        with:
          msystem: MINGW64
          update: true
          install: |
              git
              zip
              unzip
              base-devel
              mingw-w64-x86_64-gcc
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-ninja

      - name: Build portaudio
        if: startsWith(runner.os, 'Windows')
        shell: msys2 {0}
        run: |
          export CYGPATH=$(cygpath -m /)
          git clone https://github.com/portaudio/portaudio
          cmake -B portaudio/.build -S portaudio -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} -DPA_BUILD_SHARED_LIBS=on -DCMAKE_BUILD_TYPE=Release -DPA_USE_ASIO=on
          cmake --build portaudio/.build/
          cmake --install portaudio/.build/
          rm -rf portaudio
          mv $CYGPATH/mingw64/bin/libportaudio.dll $pythonLocation/lib/site-packages/_sounddevice_data/portaudio-binaries/libportaudio64bit.dll

      # - name: Build ${{ env.BINARY_NAME }} core ${{ env.action_state }}
      #   if: startsWith(runner.os, 'Windows')
      #   run: |
      #     mv tools/hook-samplerate.py $pythonLocation/lib/site-packages/_pyinstaller_hooks_contrib/hooks/stdhooks/hook-samplerate.py
      #     pyinstaller win.spec \
      #     && \
      #     7z.exe a -tzip $BINARY_NAME-core-$action_state.zip dist/LedFx "-mx5" "-xr!.git" "-xr!.github"

      # - name: Upload ${{ env.BINARY_NAME }} core ${{ env.action_state }}
      #   if: startsWith(runner.os, 'Windows')
      #   uses: actions/upload-artifact@v3
      #   with:
      #       name: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}.zip
      #       path: ${{ env.BINARY_NAME }}-core-${{ env.action_state }}.zip

      # - name: Build ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
      #   if: startsWith(runner.os, 'Windows')
      #   run: |
      #       pyinstaller win-portable.spec
      #       ls dist/
      #       mv dist/LedFx.exe dist/$BINARY_NAME-portable-$action_state.exe


      # - name: Upload ${{ env.BINARY_NAME }} portable ${{ env.action_state }}
      #   if: startsWith(runner.os, 'Windows')
      #   uses: actions/upload-artifact@v3
      #   with:
      #       name: ${{ env.BINARY_NAME }}-portable-${{ env.action_state }}.exe
      #       path: dist\${{ env.BINARY_NAME }}-portable-${{ env.action_state }}.exe
